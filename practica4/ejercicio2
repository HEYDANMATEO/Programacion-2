public interface Coloreado {
    String comoColorear();
}
public abstract class Figura {
    protected String color;
    
    public Figura(String color) {
        this.color = color;
    }
    
    public void setColor(String color) {
        this.color = color;
    }
    
    public String getColor() {
        return color;
    }
    
    @Override
    public String toString() {
        return "Figura [color=" + color + "]";
    }
    
    public abstract double area();
    public abstract double perimetro();
}
  public class Cuadrado extends Figura implements Coloreado {
    private double lado;
    
    public Cuadrado(String color, double lado) {
        super(color);
        this.lado = lado;
    }
    
    @Override
    public double area() {
        return lado * lado;
    }
    
    @Override
    public double perimetro() {
        return 4 * lado;
    }
    
    @Override
    public String comoColorear() {
        return "Colorear los cuatro lados";
    }
    
    @Override
    public String toString() {
        return "Cuadrado [lado=" + lado + ", color=" + color + "]";
    }
    
    public double getLado() {
        return lado;
    }
}
public class Cuadrado extends Figura implements Coloreado {
    private double lado;
    
    public Cuadrado(String color, double lado) {
        super(color);
        this.lado = lado;
    }
    
    @Override
    public double area() {
        return lado * lado;
    }
    
    @Override
    public double perimetro() {
        return 4 * lado;
    }
    
    @Override
    public String comoColorear() {
        return "Colorear los cuatro lados";
    }
    
    @Override
    public String toString() {
        return "Cuadrado [lado=" + lado + ", color=" + color + "]";
    }
    
    public double getLado() {
        return lado;
    }
}
public class Circulo extends Figura {
    private double radio;
    
    public Circulo(String color, double radio) {
        super(color);
        this.radio = radio;
    }
    
    @Override
    public double area() {
        return Math.PI * radio * radio;
    }
    
    @Override
    public double perimetro() {
        return 2 * Math.PI * radio;
    }
    
    @Override
    public String toString() {
        return "Circulo [radio=" + radio + ", color=" + color + "]";
    }
    
    public double getRadio() {
        return radio;
    }
}
import java.util.Random;

public class SistemaFigura{
    public static void main(String[] args) {
        Random random = new Random();
        Figura[] figuras = new Figura[5];
        String[] colores = {"Rojo", "Azul", "Verde", "Amarillo", "Morado", "Naranja"};
        
        System.out.println("=== GENERANDO FIGURAS ALEATORIAS ===\n");
        
        for (int i = 0; i < 5; i++) {
            int tipoFigura = random.nextInt(2) + 1;
            String color = colores[random.nextInt(colores.length)];
            
            if (tipoFigura == 1) {
                double lado = 1 + random.nextDouble() * 10;
                figuras[i] = new Cuadrado(color, lado);
                System.out.println("Creado Cuadrado: " + figuras[i]);
            } else {
                double radio = 1 + random.nextDouble() * 5;
                figuras[i] = new Circulo(color, radio);
                System.out.println("Creado Círculo: " + figuras[i]);
            }
        } 
        System.out.println("\n=== INFORMACIÓN DE FIGURAS ===");
        for (int i = 0; i < figuras.length; i++) {
            System.out.println("\nFigura #" + (i + 1) + ": " + figuras[i]);
            System.out.printf("Área: %.2f%n", figuras[i].area());
            System.out.printf("Perímetro: %.2f%n", figuras[i].perimetro());
            
            if (figuras[i] instanceof Coloreado) {
                Coloreado coloreable = (Coloreado) figuras[i];
                System.out.println("Método colorear: " + coloreable.comoColorear());
            } else {
                System.out.println("Esta figura no implementa la interfaz Coloreado");
            }
        }
    }                 
}
